// Generated by gencpp from file urdf_tutorial/changescaleRequest.msg
// DO NOT EDIT!


#ifndef URDF_TUTORIAL_MESSAGE_CHANGESCALEREQUEST_H
#define URDF_TUTORIAL_MESSAGE_CHANGESCALEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace urdf_tutorial
{
template <class ContainerAllocator>
struct changescaleRequest_
{
  typedef changescaleRequest_<ContainerAllocator> Type;

  changescaleRequest_()
    : s(0.0)  {
    }
  changescaleRequest_(const ContainerAllocator& _alloc)
    : s(0.0)  {
  (void)_alloc;
    }



   typedef float _s_type;
  _s_type s;





  typedef boost::shared_ptr< ::urdf_tutorial::changescaleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::urdf_tutorial::changescaleRequest_<ContainerAllocator> const> ConstPtr;

}; // struct changescaleRequest_

typedef ::urdf_tutorial::changescaleRequest_<std::allocator<void> > changescaleRequest;

typedef boost::shared_ptr< ::urdf_tutorial::changescaleRequest > changescaleRequestPtr;
typedef boost::shared_ptr< ::urdf_tutorial::changescaleRequest const> changescaleRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::urdf_tutorial::changescaleRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::urdf_tutorial::changescaleRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::urdf_tutorial::changescaleRequest_<ContainerAllocator1> & lhs, const ::urdf_tutorial::changescaleRequest_<ContainerAllocator2> & rhs)
{
  return lhs.s == rhs.s;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::urdf_tutorial::changescaleRequest_<ContainerAllocator1> & lhs, const ::urdf_tutorial::changescaleRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace urdf_tutorial

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::urdf_tutorial::changescaleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::urdf_tutorial::changescaleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::urdf_tutorial::changescaleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::urdf_tutorial::changescaleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::urdf_tutorial::changescaleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::urdf_tutorial::changescaleRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::urdf_tutorial::changescaleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc08dbcb40b2ba4b05703f0913420f07";
  }

  static const char* value(const ::urdf_tutorial::changescaleRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc08dbcb40b2ba4bULL;
  static const uint64_t static_value2 = 0x05703f0913420f07ULL;
};

template<class ContainerAllocator>
struct DataType< ::urdf_tutorial::changescaleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "urdf_tutorial/changescaleRequest";
  }

  static const char* value(const ::urdf_tutorial::changescaleRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::urdf_tutorial::changescaleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 s\n"
;
  }

  static const char* value(const ::urdf_tutorial::changescaleRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::urdf_tutorial::changescaleRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct changescaleRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::urdf_tutorial::changescaleRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::urdf_tutorial::changescaleRequest_<ContainerAllocator>& v)
  {
    s << indent << "s: ";
    Printer<float>::stream(s, indent + "  ", v.s);
  }
};

} // namespace message_operations
} // namespace ros

#endif // URDF_TUTORIAL_MESSAGE_CHANGESCALEREQUEST_H
